[{"content":"\u003ch2 id=\"static-webpage\"\u003eStatic Webpage\u003c/h2\u003e\n\u003cp\u003eLet me explain how I created this website. First of all, this website is a static webpage, but what is a static webpage?\u003c/p\u003e\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Static_web_page\"\u003estatic webpage\u003c/a\u003e is a website that is not generated dynamically, but rather is pre-generated and served as-is to the user. This means that the content of the website does not change based on user input or other factors, and it is typically faster and more secure than dynamic websites.\u003c/p\u003e\n\u003cp\u003eOk so now you know what a static webpage is, but are there any benefits to using a static webpage? Yes, there are many benefits to using a static webpage, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSpeed\u003c/strong\u003e: Static webpages are typically faster to load than dynamic webpages, as they do not require server-side processing or database queries.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCost\u003c/strong\u003e: Static webpages are often cheaper to host than dynamic webpages, as they do not require a server with a database or server-side scripting capabilities.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSimplicity\u003c/strong\u003e: Static webpages are easier to create and maintain than dynamic webpages, as they do not require complex server-side programming or database management.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"hugo\"\u003eHugo\u003c/h2\u003e\n\u003cp\u003eBut how do you create a static webpage? There are many ways to create a static webpage, but I will explain how I created this website using \u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e and \u003ca href=\"https://github.com/gurusabarish/hugo-profile\"\u003eHugo Profile\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eHugo is a framework for building static websites quickly and easily. It is written in Go and is known for its speed and flexibility.\u003c/p\u003e\n\u003cp\u003eFirst of all, you need to install Hugo. You can do this by following the instructions on the \u003ca href=\"https://gohugo.io/getting-started/installing/\"\u003eHugo installation page\u003c/a\u003e. I am using Fedora, so I installed Hugo with this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo dnf install hugo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen you can create a new Hugo site with this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new site \u0026lt;site-name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/projects/this_website/hugo_new_site.png\" alt=\"Hugo new site command\"\u003e\u003c/p\u003e\n\u003cp\u003eThis will create a new directory with the name you specified, and it will contain the basic structure of a Hugo site. I additionally used the \u003ccode\u003e--format=yaml\u003c/code\u003e option to create the configuration file in YAML format. You can also use TOML or JSON, but I prefer YAML because I am more familiar with it.\u003c/p\u003e\n\u003ch2 id=\"hugo-profile\"\u003eHugo Profile\u003c/h2\u003e\n\u003cp\u003eAfter creating the site, you need to add a theme. I used \u003ca href=\"https://github.com/gurusabarish/hugo-profile\"\u003eHugo Profile\u003c/a\u003e. To add the theme, you need to clone the theme repository into the \u003ccode\u003ethemes\u003c/code\u003e directory of your Hugo site. You can do this with the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone https://github.com/gurusabarish/hugo-profile.git themes/hugo-profile\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter that to speed things up I coppied the \u003ccode\u003econfig.yaml\u003c/code\u003e file from the theme to the root of my site. This file contains the configuration for the Hugo and the theme itself, and it is used by Hugo to generate the site.\u003c/p\u003e\n\u003cp\u003eThere are few things that you need to change in the \u003ccode\u003econfig.yaml\u003c/code\u003e file. First of all, you need to change the \u003ccode\u003ebaseURL\u003c/code\u003e to the URL of your website. You can also change the \u003ccode\u003etitle\u003c/code\u003e, \u003ccode\u003edescription\u003c/code\u003e, and other settings to customize your site.\u003c/p\u003e\n\u003cp\u003eI don\u0026rsquo;t want to go into too much detail about the configuration file, because I don\u0026rsquo;t want to create tutorial about \u0026ldquo;How to create Hugo webpage\u0026rdquo;. Instead, I want to explaint how I created this exact website from more technical and hosting point of view.\u003c/p\u003e\n\u003ch2 id=\"hosting\"\u003eHosting\u003c/h2\u003e\n\u003cp\u003eAfter creating the site, you need to host it. There are many ways to host a static website. The easiest way is to use a \u003ca href=\"https://pages.github.com/\"\u003eGitHub Pages\u003c/a\u003e. You can create a new repository on GitHub, push your Hugo site to the repository, and then enable GitHub Pages in the repository settings. This will allow you to serve your static website directly from GitHub.\u003c/p\u003e\n\u003cp\u003eI didn\u0026rsquo;t want to use GitHub Pages, because I wanted to host my website under my own domain. So I decided to use \u003ca href=\"https://www.oracle.com/cloud/\"\u003eOracle Cloud\u003c/a\u003e with \u003ca href=\"https://www.cloudflare.com/\"\u003eCloudflare\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"oracle-cloud\"\u003eOracle Cloud\u003c/h3\u003e\n\u003cp\u003eOracle Cloud is a cloud computing service that offers a wide range of services, including virtual machines, storage, and networking. It is free to use for the first 30 days, and it offers a free tier with limited resources.\u003c/p\u003e\n\u003cp\u003eYou can create VM on Oracle Cloud manually, using the web interface, it isn\u0026rsquo;t that hard. But I wanted to automate the process, so I used \u003ca href=\"https://www.opentofu.org/\"\u003eOpenTofu\u003c/a\u003e to create the VM. OpenTofu is an open-source alternative to Terraform, and it allows you to create and manage cloud resources using code.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/projects/this_website/oracle_vm_creation.png\" alt=\"Creating VM with Oracle Web Interface\"\u003e\u003c/p\u003e\n\u003cp\u003eTo use OpenTofu, you need to install it first. You can do this by following the instructions on the \u003ca href=\"https://opentofu.org/docs/intro/install/\"\u003eOpenTofu installation page\u003c/a\u003e. I am using Fedora, so I installed OpenTofu with this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo dnf install opentofu\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter that, you need to create a configuration file for OpenTofu. This file contains the configuration for the VM, including the image, shape, and networking settings. You can find an example configuration file in the \u003ca href=\"https://registry.terraform.io/providers/oracle/oci/latest/docs\"\u003eOracle Provider documentation\u003c/a\u003e. Creating every resource manually is a bit tedious, but you can use \u003ca href=\"https://github.com/oracle-terraform-modules/terraform-oci-compute-instance\"\u003emodule\u003c/a\u003e created by Oracle to create the VM. Module is, lets say, a template for creating resources.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/projects/this_website/opentofu_oci_module.png\" alt=\"Creating VM with OpenTofu\"\u003e\u003c/p\u003e\n\u003cp\u003eThis is part of the configuration file that I use to create the VM, let\u0026rsquo;s go through it step by step:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esource\u003c/code\u003e: Where to find the module. In this case, it is the Oracle module for creating a VM.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ead_number\u003c/code\u003e: This is the availability domain number, in this case it is 1. You can find the availability domain number in the Oracle Cloud console.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecompartment_id\u003c/code\u003e: Compartment is a logical container for your resources. You can create compartments in the Oracle Cloud console and also find its ID there.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003einstance_display_name\u003c/code\u003e: VM name, no need to explain.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esource_ocid\u003c/code\u003e: This is the ID of the image that you want to use for the VM. Let\u0026rsquo;s say it is like an ISO image for the VM. You can find the image ID in the Oracle Cloud console.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubnet_ocids\u003c/code\u003e: Here you need to specify the subnet ID. Multiple subnets can be specified, but in my case I only have one subnet. You can find the subnet ID in the Oracle Cloud console.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epublic_ip\u003c/code\u003e: Here you can specify if you want to create a public IP address for the VM. I set it to \u003ccode\u003eNONE\u003c/code\u003e, because I will asign the public IP later.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003essh_public_keys\u003c/code\u003e: This is the public SSH key that you want to use to connect to the VM. Without this key you won\u0026rsquo;t be able to connect to the VM.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eblock_storage_size_in_gbs\u003c/code\u003e: This is the size of the \u0026ldquo;disk\u0026rdquo; that you want to use for the VM. You can attach multiple disks to the VM.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eboot_volume_size_in_gbs\u003c/code\u003e: If the previous option is the size of the \u0026ldquo;disk\u0026rdquo;, this is the size of the \u0026ldquo;boot partition\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eshape\u003c/code\u003e: Shape of the VM is specific name for \u0026ldquo;this many cores and this much RAM\u0026rdquo;. You can find the shape name in the Oracle Cloud console.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003einstance_state\u003c/code\u003e: Here you can specify if you want to create the VM in a stopped state or running state. I set it to \u003ccode\u003eRUNNING\u003c/code\u003e, because I want to use the VM right after it is created.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eboot_volume_backup_policy\u003c/code\u003e: Here you can specify if you want to create a backup policy for the boot volume. I set it to \u003ccode\u003edisabled\u003c/code\u003e, because I don\u0026rsquo;t need it.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euser_data\u003c/code\u003e: This point will be explained later, but this is the script that will be executed when the VM is created. You can use it to install software, configure the VM, etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"user-data\"\u003eUser data\u003c/h4\u003e\n\u003cp\u003eThe user data is a cloud-init file that is executed when the VM is created. In cloud-init file you can define if you want to update the system packages during the first boot, install additionanl packages, format and mount additional disks, and create scripts that will be executed after the first boot.\u003c/p\u003e\n\u003cp\u003eI used the cloud-init file to mount the additional block storage to my VM. This block storage is independent from the VM, so it will be preserved even if the VM is deleted. This allows me to replace the VM without losing the data. After that I install Docker and download \u003ccode\u003edocker-compose\u003c/code\u003e file from repository where I defined the services that I want to run on the VM.\u003c/p\u003e\n","description":null,"image":"/images/projects/this_website/website.png","permalink":"https://info.morganmlg.com/projects/this_website/","title":"This website"},{"content":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways. :zap:\u003c/p\u003e\n\u003ch2 id=\"emoji-support\"\u003eEmoji Support\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href=\"https://gohugo.io/functions/emojify/\"\u003eemojify\u003c/a\u003e function can be called directly in templates or \u003ca href=\"https://gohugo.io/templates/shortcode-templates/#inline-shortcodes\"\u003eInline Shortcodes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo enable emoji globally, set \u003ccode\u003eenableEmoji\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e in your site’s \u003ca href=\"https://gohugo.io/getting-started/configuration/\"\u003econfiguration\u003c/a\u003e and then you can type emoji shorthand codes directly in content files; e.g.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"http://www.emoji-cheat-sheet.com/\"\u003eEmoji cheat sheet\u003c/a\u003e is a useful reference for emoji shorthand codes.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eN.B.\u003c/strong\u003e The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.emoji {\n  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;\n}\n\u003c/code\u003e\u003c/pre\u003e","description":null,"image":"/codeberg.png","permalink":"https://info.morganmlg.com/projects/emoji-support/","title":"Emoji Support"}]